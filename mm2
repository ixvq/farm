local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

local Window = Rayfield:CreateWindow({
   Name = "autofarm",
   LoadingTitle = "nvm",
   LoadingSubtitle = "by t7ut",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "t7ut hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("autofarm", nil) -- Title, Image
local AutofarmSection = MainTab:CreateSection("Autofarm")

local AutofarmButton = MainTab:CreateButton({
   Name = "Autofarm addon",
   Callback = function()
   -- Function to check the number using Tesseract
function get_candy_count(image_path)
    -- Run tesseract OCR to extract the number
    os.execute('tesseract "' .. image_path .. '" output.txt --psm 6')
    
    -- Read the output from the file
    local file = io.open("output.txt", "r")
    local result = file:read("*all")
    file:close()

    -- Extract the number from the result (filter non-numeric characters)
    local candy_count = tonumber(result:match("%d+"))
    
    return candy_count
end

-- Function to simulate key presses (adjust depending on your environment)
function press_key(key)
    -- For example, Cheat Engine or other environments might have keyDown and keyUp functions
    print("Pressing key: " .. key)
    -- Replace this print statement with actual key press logic
    -- keyDown(key)
    -- sleep(100)
    -- keyUp(key)
end

-- Main automation loop
function auto_farm(image_path)
    while true do
        -- Check the candy bag amount by running OCR
        local candy_count = get_candy_count(image_path)
        print("Candy count: " .. (candy_count or "nil"))
        
        -- If the bag is full (== 40), perform the actions
        if candy_count == 40 then
            print("Candy bag is full. Executing key presses.")
            os.execute("sleep 4") -- Wait for 4 seconds
            
            -- Simulate pressing 'c'
            press_key("c")
            os.execute("sleep 1")  -- Wait for 1 second
            
            -- Simulate pressing 'k'
            press_key("k")
            
            -- Wait for 10 seconds before rechecking
            os.execute("sleep 10")
        else
            print("Candy bag not full yet.")
        end

        -- Small interval before checking again
        os.execute("sleep 1")
    end
end

-- Start the autofarming (provide the path to the image)
auto_farm("/mnt/data/Zrzut ekranu 2024-10-19 130353.png")

   end,
})
